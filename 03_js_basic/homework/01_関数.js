/**
 * 問1. 宣言されたtest1関数を実行してください
 */
function test1() {
  console.log("----- これが出力されれば成功");
}

test1();

/**
 * 問2. 実行されるtest2関数を宣言してください。関数内ではconsoleで自分のslack名を出力してください
 */

const test2 = () => {
  const myName = "ブロリー田中";
  console.log(`My name is ${myName}`);
};

test2();

/**
 * 問3. 下記test3関数は実行されるかどうか、推測・確認してください
 * 確認後、実行結果に対して、なぜこの実行結果になったのか説明してください
 */
function test3() {
  console.log("====================");
}

test3;
/**
 * 問3. 回答欄
 * 実行されないと思います。
 *
 * 実行結果を確認すると=====================が表示されていなかったので実行されていなかったと言えます。
 *
 * この実行結果になったのは関数名の後ろに()がないからです。
 *
 */

/**
 * 問4. 下記test4関数の実行結果がconsoleで
 * '引数を入れた実行結果'
 * という文字列が表示されるように引数を入れてください
 */
function test4(arg) {
  console.log(arg);
}

test4("引数を入れた実行結果");

/**
 * 問5. 下記test5関数の引数にデフォルトの値を付与しました。
 * 引数のデフォルト値がどのような動きをするのか、検証の上、説明して下さい
 */
function test5(arg = "default param") {
  console.log(arg);
}

// test5();
test5("塩田さんは天才エンジニア");
/**
 * 問5. 回答欄
 * 引数を入れないときは"default param",引数をいれるとその文字列が表示されます。
 * したがって、デフォルト値は、引数が指定されていないときに働き、
 * 引数が指定されると、指定した引数が優先されるという性質があります。
 * 補欠とか代打の切り札的なイメージですね。
 */

/**
 * 問6. 下記test6関数の引数に、値ではなく、関数を入れました。
 * 引数に関数を入れた場合、その関数を実行できるのか検証の上、処理の流れを説明して下さい
 */
function test6(argFunc) {
  console.log("----- before argFunc");
  argFunc();
  console.log("------ after argFunc");
}
function testFunc() {
  console.log("------- in test func");
}
test6(testFunc);

/**
 * 問6. 回答欄
 * 実行結果
 * ----- before argFunc
 * ------- in test func
 * ------ after argFunc
 * 実行結果より、testFuncをtest6の引数に代入しても、test6のなかで引数に()をつけて実行するとtestFuncが実行されることがわかる。
 * また、実行結果の順より、testFuncは
 * test6(testFunc);
 * という行で実行されたのではなく,
 * argFunc();
 * で実行されたのがわかる。
 */

/**
 * 問7. 下記test8の計算結果を変数result7に格納してください。
 * 問題文となるコードを変更して回答してください
 */
let result7;
function test7(num) {
  return num ** 2;
}
const edge = 32;
result7 = test7(edge);
console.log(`1辺 ${edge}cm の正方形の面積は ${result7}cm^2 です。`);

/**
 * 問8. 実行された場合、実行結果として2つの引数の数の和が返される関数test8を作成してください。
 * また、この問題は無名関数(即時関数)を使用し、アロー関数として記載してください
 */

const test8 = (num, num2) => num + num2;
const addNum = 19;
const addNum2 = 47;
console.log(`${addNum} + ${addNum2} = ${test8(addNum, addNum2)}`);

/**
 * 問9. 無名関数(即時関数)とは何か、説明して下さい
 */

/**
 * 問9. 回答欄
 * 無名関数とは、宣言時に変数に代入する形で定義する関数である。
 * 関数を代入する変数の名前はあるが、関数の名前は設定しないので無名関数と呼ばれている。
 *
 * 普通の関数との大きな違いについて。
 * 普通の関数は「定義部分より前でも呼び出しができる」が、無名関数ならできない。
 * 「定義部分より前でも呼び出しができる」ことを「巻き上げ」とよぶ。
 * 巻き上げはJavaScript特有の機能であり推奨されないので
 * 無名関数が主流とされている。
 */

/**
 * 問10. 関数とは何か、説明してください
 */

/**
 * 問10. 回答欄
 * 関数とは、呼び出されたたびに定義された処理をするものである。
 *
 * 関数に任意の値を与えて動的に関数の処理をさせることもある。
 * このとき与える値は引数と呼ばれる。
 *
 * また、関数の処理結果を呼び出し部分に返すこともある。
 * この返す値を戻り値という。
 */

/**
 * 問11. 変数とは何か、説明してください
 */

/**
 * 問11. 回答欄
 * 変数とは値を格納する箱である。
 * 変数名を指定すると、それに割り当てれた値が処理される。
 *
 * 変数には必ず値が入っていて、初期化や代入で値を指定しない場合はundefinedという値が入っている。
 * また、再代入不可能な変数を宣言する場合はconstを指定し、再代入を許可する変数を宣言する場合はlet,var(非推奨)を指定する。
 */

/**
 * 問12. 引数とは何か、説明してください
 */

/**
 * 問12. 回答欄
 * 引数とは、関数に渡す値である。
 * 引数がなければ、関数は必ず同じ処理をするが、
 * 引数があることによって、関数に動的な処理をさせることができる。
 *
 * なお、引数が指定できる関数を呼び出すときに、引数を指定しない場合は引数にundefinedが代入される。
 * そのときデフォルト値を用意しておけば、そのデフォルト値が関数の処理に使われる。
 */
